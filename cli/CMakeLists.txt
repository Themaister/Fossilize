add_library(volk STATIC volk/volk.c volk/volk.h)
target_include_directories(volk PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/volk ${CMAKE_CURRENT_SOURCE_DIR}/../khronos)
target_compile_options(volk PRIVATE ${FOSSILIZE_CXX_FLAGS})
if (NOT WIN32)
	target_link_libraries(volk dl)
endif()

set(SPIRV_WERROR OFF CACHE BOOL "Force no Werror")
set(SPIRV-Headers_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/SPIRV-Headers" CACHE STRING "SPIRV-Headers path")
set(SHADERC_SKIP_TESTS ON)
add_subdirectory(SPIRV-Tools EXCLUDE_FROM_ALL)
add_subdirectory(SPIRV-Cross EXCLUDE_FROM_ALL)

add_library(cli-utils STATIC cli_parser.cpp cli_parser.hpp device.hpp device.cpp file.hpp file.cpp)
target_compile_options(cli-utils PRIVATE ${FOSSILIZE_CXX_FLAGS})
target_include_directories(cli-utils PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(cli-utils volk)
if (ANDROID)
	target_link_libraries(cli-utils log)
endif()

function(add_fossilize_cli NAME)
	add_executable(${NAME} ${ARGN})
	target_compile_options(${NAME} PRIVATE ${FOSSILIZE_CXX_FLAGS})
	target_link_libraries(${NAME} fossilize cli-utils)
	if (FOSSILIZE_SANITIZE_ADDRESS OR FOSSILIZE_SANITIZE_THREADS)
		set_target_properties(${NAME} PROPERTIES LINK_FLAGS "${FOSSILIZE_LINK_FLAGS}")
	endif()
endfunction()

add_fossilize_cli(fossilize-replay fossilize_replay.cpp)
add_fossilize_cli(fossilize-disasm fossilize_disasm.cpp)
target_link_libraries(fossilize-disasm SPIRV-Tools spirv-cross-glsl)
add_fossilize_cli(fossilize-opt fossilize_opt.cpp)
target_link_libraries(fossilize-opt SPIRV-Tools-opt)
